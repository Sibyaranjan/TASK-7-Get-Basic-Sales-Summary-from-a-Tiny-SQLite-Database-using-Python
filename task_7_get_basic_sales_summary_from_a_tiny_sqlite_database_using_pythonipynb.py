# -*- coding: utf-8 -*-
"""TASK 7: Get Basic Sales Summary from a Tiny SQLite Database using Pythonipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nvlGLyTdv3e_Bq6sfS2d0f7o8-5rZR3G
"""

import sqlite3
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from datetime import datetime

df=pd.read_excel("Sales Dataset.xlsx")# To read the Excel sheet

print(f"Dataset shape: {df.shape}")
print(f"Columns: {list(df.columns)}")
print("\nFirst few rows:")
print(df.head())

conn = sqlite3.connect('Sales Data.db')
cursor = conn.cursor()

df.to_sql('sales', conn, if_exists='replace', index=False)
print("\nData loaded into SQLite table 'sales'.")

# Basic Info - Total number of orders (unique OrderNumber)
cursor.execute('''
SELECT COUNT(DISTINCT OrderNumber) AS total_orders
FROM sales
''')
total_orders = cursor.fetchone()[0]
print(f"\n1. Total Number of Orders: {total_orders}")

#Total Quantity Sold (sum of Order Quantity)
cursor.execute('''
SELECT SUM("Order Quantity") AS total_quantity_sold
FROM sales
''')
total_quantity = cursor.fetchone()[0]
print(f"2. Total Quantity Sold: {total_quantity}")

# Total Revenue (sum of Line Total, assuming this is revenue per line)
cursor.execute('''
SELECT SUM("Line Total") AS total_revenue
FROM sales
''')
total_revenue = cursor.fetchone()[0]
print(f"3. Total Revenue: ${total_revenue:.2f}")

# Average Unit Price
cursor.execute('''
SELECT AVG("Unit Price") AS avg_unit_price
FROM sales
''')
avg_unit_price = cursor.fetchone()[0]
print(f"4. Average Unit Price: ${avg_unit_price:.2f}")

# Total Cost (sum of Total Unit Cost)
cursor.execute('''
SELECT SUM("Total Unit Cost") AS total_cost
FROM sales
''')
total_cost = cursor.fetchone()[0]
print(f"5. Total Cost: ${total_cost:.2f}")

#Profit (Total Revenue - Total Cost)
profit = total_revenue - total_cost
print(f"6. Total Profit: ${profit:.2f}")

#Top 5 Products by Quantity Sold (group by Product Description Index)
cursor.execute('''
SELECT "Product Description Index", SUM("Order Quantity") AS total_qty
FROM sales
GROUP BY "Product Description Index"
ORDER BY total_qty DESC
LIMIT 5
''')
top_products = cursor.fetchall()
print(f"\n7. Top 5 Products by Quantity Sold:")
for product, qty in top_products:
    print(f"   - {product}: {qty}")

#Sales by Delivery Region (total revenue grouped by region)
cursor.execute('''
SELECT "Delivery Region Index", SUM("Line Total") AS region_revenue
FROM sales
GROUP BY "Delivery Region Index"
ORDER BY region_revenue DESC
''')
sales_by_region = cursor.fetchall()
print(f"\n8. Total Revenue by Delivery Region:")
for region, revenue in sales_by_region:
    print(f"   - {region}: ${revenue:.2f}")

#Sales by Channel (total revenue grouped by Channel)
cursor.execute('''
SELECT Channel, SUM("Line Total") AS channel_revenue
FROM sales
GROUP BY Channel
ORDER BY channel_revenue DESC
''')
sales_by_channel = cursor.fetchall()
print(f"\n9. Total Revenue by Channel:")
for channel, revenue in sales_by_channel:
    print(f"   - {channel}: ${revenue:.2f}")

#Top 5 Customers by Revenue (group by Customer Name Index)
cursor.execute('''
SELECT "Customer Name Index", SUM("Line Total") AS customer_revenue
FROM sales
GROUP BY "Customer Name Index"
ORDER BY customer_revenue DESC
LIMIT 5
''')
top_customers = cursor.fetchall()
print(f"\n10. Top 5 Customers by Revenue:")
for customer, revenue in top_customers:
    print(f"    - {customer}: ${revenue:.2f}")

#Total Revenue for a Specific Date Range (e.g., 2023 orders)
# Assuming OrderDate is in 'YYYY-MM-DD' format; adjust if needed
cursor.execute('''
SELECT SUM("Line Total") AS revenue_2023
FROM sales
WHERE strftime('%Y', OrderDate) = '2023'
''')
revenue_2023 = cursor.fetchone()[0] or 0
print(f"\n11. Total Revenue for 2023: ${revenue_2023:.2f}")

#Average Order Value (total revenue / total orders)
cursor.execute('''
SELECT (SUM("Line Total") / COUNT(DISTINCT OrderNumber)) AS avg_order_value
FROM sales
''')
avg_order_value = cursor.fetchone()[0]
print(f"12. Average Order Value: ${avg_order_value:.2f}")

#Count of Unique Products
cursor.execute('''
SELECT COUNT(DISTINCT "Product Description Index") AS unique_products
FROM sales
''')
unique_products = cursor.fetchone()[0]
print(f"13. Number of Unique Products: {unique_products}")

#Currency Distribution (if multiple currencies)
cursor.execute('''
SELECT "Currency Code", COUNT(*) AS order_count
FROM sales
GROUP BY "Currency Code"
''')
currencies = cursor.fetchall()
print(f"\n14. Order Count by Currency:")
for currency, count in currencies:
    print(f"   - {currency}: {count} orders")

df['OrderDate'] = pd.to_datetime(df['OrderDate'], errors='coerce')

# Extract year and month for time-based plots
df['Year'] = df['OrderDate'].dt.year
df['Month'] = df['OrderDate'].dt.month

# Handle any missing values (drop rows with NaN in key columns for simplicity)
df = df.dropna(subset=['Order Quantity', 'Line Total', 'Unit Price'])
# Set style for Seaborn (optional, for better aesthetics)
sns.set_style("whitegrid")
plt.style.use('default')  # For Matplotlib

#Total Revenue by Delivery Region (using Matplotlib)
region_revenue = df.groupby('Delivery Region Index')['Line Total'].sum().sort_values(ascending=False)
plt.figure(figsize=(10, 6))
region_revenue.plot(kind='bar', color='skyblue', edgecolor='black')
plt.title('Total Revenue by Delivery Region')
plt.xlabel('Delivery Region')
plt.ylabel('Total Revenue ($)')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

#Sales Trend Over Time (Monthly Revenue)
monthly_revenue = df.groupby(['Year', 'Month'])['Line Total'].sum().reset_index()
monthly_revenue['Date'] = pd.to_datetime(monthly_revenue[['Year', 'Month']].assign(day=1))
monthly_revenue = monthly_revenue.sort_values('Date')
plt.figure(figsize=(12, 6))
plt.plot(monthly_revenue['Date'], monthly_revenue['Line Total'], marker='o', linewidth=2, color='green')
plt.title('Monthly Revenue Trend ')
plt.xlabel('Date')
plt.ylabel('Revenue ($)')
plt.xticks(rotation=45)
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()

#Revenue Distribution by Channel
channel_revenue = df.groupby('Channel')['Line Total'].sum()
plt.figure(figsize=(8, 8))
plt.pie(channel_revenue.values, labels=channel_revenue.index, autopct='%1.1f%%', startangle=90, colors=plt.cm.Set3.colors)
plt.title('Revenue Distribution by Channel ')
plt.axis('equal')  # Equal aspect ratio ensures pie is circular
plt.show()

#Order Quantity vs Unit Price (colored by Channel)
plt.figure(figsize=(10, 6))
scatter = plt.scatter(df['Order Quantity'], df['Unit Price'], c=df['Channel'].astype('category').cat.codes, cmap='viridis', alpha=0.6)
plt.title('Order Quantity vs Unit Price')
plt.xlabel('Order Quantity')
plt.ylabel('Unit Price ($)')
plt.colorbar(scatter, label='Channel')
plt.grid(True, alpha=0.3)
plt.tight_layout()
plt.show()

#Distribution of Line Total
plt.figure(figsize=(10, 6))
plt.hist(df['Line Total'], bins=30, color='lightcoral', edgecolor='black', alpha=0.7)
plt.title('Distribution of Line Total (Revenue per Line Item) ')
plt.xlabel('Line Total ($)')
plt.ylabel('Frequency')
plt.axvline(df['Line Total'].mean(), color='red', linestyle='--', label=f'Mean: ${df["Line Total"].mean():.2f}')
plt.legend()
plt.tight_layout()
plt.show()

# Number of Orders by Channel
plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='Channel', palette='Set2')
plt.title('Number of Orders by Channel')
plt.xlabel('Channel')
plt.ylabel('Number of Orders')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()